name: Header Backend DEPLOY

on:
  push:
    branches:
      - master
      - develope

jobs:
  header_backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        # JDK setting - 깃허브 actions에서 사용할 JDK 설정(프로젝트나 AWS의 java 버전과 달라도 무방하다.)
        uses: actions/checkout@v4

      - name: access to secrets
        run: |
          echo "SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}" > .env
          echo "SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" >> .env
          echo "MYSQL_DATABASE=${MYSQL_DATABASE}" >> .env
          echo "MYSQL_USER=${MYSQL_USER}" >> .env
          echo "MYSQL_PASSWORD=${MYSQL_PASSWORD}" >> .env
          echo "COOLSMS_API_KEY=${COOLSMS_API_KEY}" >> .env
          echo "COOLSMS_API_SECRET=${COOLSMS_API_SECRET}" >> .env
          echo "COOLSMS_BASE_URL=${COOLSMS_BASE_URL}" >> .env
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          COOLSMS_API_KEY: ${{ secrets.COOLSMS_API_KEY }}
          COOLSMS_API_SECRET: ${{ secrets.COOLSMS_API_SECRET }}
          COOLSMS_BASE_URL: ${{ secrets.COOLSMS_BASE_URL }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 빌드 시간 향상 - 해당 과정은 생략 가능하지만 적용 시 빌드 시간 단축 가능하다.
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 환경별 yml파일 생성(1) - application.yml
      - name: make application.yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_PROPERTIES }}" | base64 --decode > ./src/main/resources/application.yml

      # 빌드
      # docker-test-prod 도커 레포지토리 이름
      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # Docker 이미지 빌드 후 Docker Hub에 푸쉬 - master/develope 브랜치
      - name: Docker build & push (master)
        if: contains(github.ref, 'master')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/header-back-img:master .
          docker push ${{ secrets.DOCKER_USERNAME }}/header-back-img:master

      - name: Docker build & push (develope)
        if: contains(github.ref, 'develope')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/header-back-img:develope .
          docker push ${{ secrets.DOCKER_USERNAME }}/header-back-img:develope

      # deploy to EC2 - master
      - name: Deploy to EC2 with docker-compose
        uses: appleboy/ssh-action@v1.0.3
        id: deploy-prod
        if: contains(github.ref, 'master')
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            mkdir -p ~/app/header-backend
            cd ~/app/header-backend

            echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" > .env
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
            echo "COOLSMS_API_KEY=${{ secrets.COOLSMS_API_KEY }}" >> .env
            echo "COOLSMS_API_SECRET=${{ secrets.COOLSMS_API_SECRET }}" >> .env
            echo "COOLSMS_BASE_URL=${{ secrets.COOLSMS_BASE_URL }}" >> .env

            git pull origin master

            docker pull ${{ secrets.DOCKER_USERNAME }}/header-back-img:master
            docker compose -f docker-compose.yml down -v || true
            docker compose -f docker-compose.yml up -d --build