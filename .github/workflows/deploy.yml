name: Header Backend DEPLOY

on:
  push:
    branches: [ "master" ]

jobs:
  Header-Backend-job:
    runs-on: ubuntu-latest

    steps:
      - name: access to secrets
        run: |
          echo "SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}" >> .env
          echo "SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" >> .env
          echo "MYSQL_DATABASE=${MYSQL_DATABASE}" >> .env
          echo "MYSQL_USER=${MYSQL_USER}" >> .env
          echo "MYSQL_PASSWORD=${MYSQL_PASSWORD}" >> .env
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}

      # JDK setting - 깃허브 actions에서 사용할 JDK 설정(프로젝트나 AWS의 java 버전과 달라도 무방하다.)
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 빌드 시간 향상 - 해당 과정은 생략 가능하지만 적용 시 빌드 시간 단축 가능하다.
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 환경별 yml파일 생성(1) - application.yml
      - name: make application.yml
        if: |
          contains(github.ref, 'master')
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./application.yml
      #     - name: make application.yml
      #       run: |
      #         mkdir -p ./src/main/resources
      #         echo "${{ secrets.APPLICATION_PROPERTIES }}" | base64 --decode > ./src/main/resources/application.yml

      # 빌드
      # docker-test-prod 도커 레포지토리 이름
      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # Docker 이미지 빌드 후 Docker Hub에 푸쉬 - master 브랜치
      - name: Docker build & push to prod
        if: contains(github.ref, 'master')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/header-back-img:master .
          docker push ${{ secrets.DOCKER_USERNAME }}/header-back-img:master

      # deploy to EC2 - master
      - name: Deploy to prod
        uses: appleboy/ssh-action@v1.0.3
        id: deploy-prod
        if: contains(github.ref, 'master')
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: APPLICATION_PROPERTIES
          script: |
            sudo docker stop header-container || true
            sudo docker rm header-container || true
            sudo docker ps
            docker logs --tail 50 header-container || true
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/header-back-img:master
            sudo docker run -d \
             --name header-container \
             -p 8080:8080 \
             -e SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }} \
             -e SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }} \
             -e SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }} \
             -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
             -e MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }} \
             -e MYSQL_USER=${{ secrets.MYSQL_USER }} \
             -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
             ${{ secrets.DOCKER_USERNAME }}/header-back-img:master
            sudo docker image prune -f