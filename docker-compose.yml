# Docker Compose 파일을 이용하여 Spring Boot 백엔드 애플리케이션과 MySQL 데이터베이스를 연동하여 함께 실행할 수 있도록 설정
# Docker Compose는 여러 개의 컨테이너(서비스)를 정의할 수 있다.
# 여기선 하나의 서비스인 header-backend-server만 정의한다.
services:
  # 서비스 이름, 나중에 docker compose up 명령으로 이 이름을 기준으로 컨테이너가 실행됨
  header_backend:
    # 이 섹션은 Docker 이미지를 직접 빌드할 것임을 나타낸다.
    build:
      # context : . -> 현재 디렉토리를 빌드 컨텍스트로 사용하겠다는 의미.
      # .dockerignore가 있다면 그 파일에 있는 내용을 빌드 시 제외함.
      context: .
      # 사용할 dockerfile의 이름을 지정
      dockerfile: Dockerfile
      # 컨테이너 이름 수동으로 설정
      # 지정하지 않으면 프로젝트이름_서비스이름_번호 형식으로 자동 생성
    container_name: header_backend
    # environment란
    # Spring Boot의 application.properties/application.yml 설정을 외부에서 주입할 수 있게 해준다.
    # 즉 Spring Boot에서 이 값들을 자동으로 읽는다.
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      COOLSMS_API_KEY: ${COOLSMS_API_KEY}
      COOLSMS_API_SECRET: ${COOLSMS_API_SECRET}
      COOLSMS_BASE_URL: ${COOLSMS_BASE_URL}
    # host port : 8080 -> container port 8080으로 포워딩
    # 브라우저에서 http://localhost:8080로 접근하면 Spring Boot 앱에 접속 가능
    ports:
      - "8080:8080"
    # header-backend-server 실행하기 전에 database-server 부터 실행하라는 의미
    depends_on:
      headerdb:
        condition: service_healthy

  headerdb:
    # 사용할 MySQL 버전 명시
    image: mysql:8
    restart: always
    container_name: headerdb
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: Asia/Seoul    # 리눅스는 타임존 속성을 걸어줘야한다.
    # 호스트 3366 port -> 컨테이너 3306 port
    # 로컬 MySQL이 이미 3306 포트를 쓰고 있다면 겹치지 않도록 포트 변경해주는 설정
    ports:
      - "3366:3306"
    # mysql-data:/var/lib/mysql : MySQL 데이터가 컨테이너 재시작 시에도 유지되도록 로컬 볼륨에 저장
    # ./init.sql:/docker-entrypoint-initdb.d/init.sql : 컨테이너 시작 시 init.sql을 자동 실행(테이블 생성 등 초기화 작업 가능)
    privileged: true
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:rw
    #      - /D:/Songpa_Backend_Java_Spring/Project_Header/Backend2/testdb/init.sql:/docker-entrypoint-initdb.d/init.sql
    #      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    #      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-p$MYSQL_ROOT_PASSWORD" ]
      interval: 5s
      timeout: 3s
      retries: 5

    # command 설정을 통해 한글/이모지 깨짐 방지 가능
    command:
      - --character-set-server=utf8mb4  # MySQL 서버 기본 문자셋을 UTF-8로 설정
      - --collation-server=utf8mb4_unicode_ci  # 정렬 기준 설정
#      - --skip-character-set-client-handshake  # 클라이언트가 다른 문자셋을 요구하더라도 무시하고 서버 설정 강제 적용